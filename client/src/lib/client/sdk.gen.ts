// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type {
	ReadRootData,
	GetItemsData,
	GetItemsError,
	InsertItemData,
	InsertItemError,
	ReadItemData,
	ReadItemResponse,
	ReadItemError
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Read Root
 */
export const readRoot = <ThrowOnError extends boolean = false>(
	options?: Options<ReadRootData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
		url: '/',
		...options
	});
};

/**
 * Get Items
 */
export const getItems = <ThrowOnError extends boolean = false>(
	options?: Options<GetItemsData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<unknown, GetItemsError, ThrowOnError>({
		url: '/items',
		...options
	});
};

/**
 * Insert Item
 */
export const insertItem = <ThrowOnError extends boolean = false>(
	options: Options<InsertItemData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<unknown, InsertItemError, ThrowOnError>({
		url: '/items',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers
		}
	});
};

/**
 * Read Item
 */
export const readItem = <ThrowOnError extends boolean = false>(
	options: Options<ReadItemData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<ReadItemResponse, ReadItemError, ThrowOnError>({
		url: '/items/{item_id}',
		...options
	});
};
